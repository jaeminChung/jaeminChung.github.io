---
layout: post
title:  "Head First Design Patterns"
date:   2018-07-17
categories: book
permalink: /archivers/HeadFirstDesignPatterns
---

* 에릭 프리먼, 엘리자베스 프리먼, 케이시 시에라, 버트 베이츠 저
* 서환수 역
* 한빛미디어

1. 데코레이터 패턴 : 객체를 감싸서 새로운 행동을 제공합니다.
2. 스테이트 패턴 : 상태를 기반으로 한 행동을 캡슐화한 다음 위임을 통해서 필요한 행동을 선택합니다.
3. 이터레이터 패턴 : 컬렉션이 어떤 식으로 구현되었는지 드러내진 않으면서도 컬렉션 내에 있는 모든 객체에 대해 반복 작업을 처리할 수 있게 해 줍니다.
4. 퍼사드 패턴 : 일련의 클래스에 대해서 간단한 인터페이스를 제공합니다.
5. 스트래티지 패턴 : 교환 가능한 행동을 캡슐화하고 위임을 통해서 어떤 행동을 사용할지 결정합니다.
6. 프록시 패턴 : 객체를 감싸서 그 객체에 대한 접근을 제어합니다.
7. 팩토리 메소드 패턴 : 생성할 구상 클래스를 서브클래스에서 결정합니다.
8. 어댑터 패턴 : 객체를 감싸서 다른 인터페이스를 제공합니다.
9. 옵저버 패턴 : 상태가 변경되면 다른 객체들한테 연락을 돌릴 수 있게 해 줍니다.
10. 템플릿 패턴 : 알고리즘의 개별 단계를 구현하는 방법을 서브클래스에서 결정합니다.
11. 컴포지트 패턴 : 클라이언트에서 객체 컬렉션과 개별 객체를 똑같이 다룰 수 있도록 해 줍니다.
12. 싱글턴 패턴 : 딱 한 객체만 생성되도록 합니다.
13. 추상 팩토리 패턴 : 클라이언트에서 구상 클래스를 지정하지 않으면서도 일군의 객체를 생성할 수 있도록 해 줍니다.
14. 커맨드 패턴 : 요청을 객체로 감쌉니다.
15. [예제소스코드](http://wickedlysmart.com/head-first-design-patterns/)
